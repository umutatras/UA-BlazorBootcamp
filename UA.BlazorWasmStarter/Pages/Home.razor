@page "/"

<PageTitle>Home</PageTitle>

<div class="input-group mb-3">
    <input @bind="password"
           readonly
           type="text"
           class="form-control">
    <span class="input-group-text my-clickable-button @onHoverCopyCss"
          id="basic-addon1"
          @onmouseenter="@(()=>OnEmojiHover(iconType:"copy"))"
          @onmouseleave="OnEmojiMouseLeft">📄</span>

    <span @onclick="HandleGeneratePasswordClick"
          class="input-group-text my-clickable-button @onHoverGenerateCss"
          id="basic-addon2"
          @onmouseenter="@(()=>OnEmojiHover(iconType:"generate"))"
          @onmouseleave="OnEmojiMouseLeft">🔄</span>

    <span @onclick="SaveHandlePasswordClick"
          class="input-group-text my-clickable-button @onHoverSaveCss"
          id="basic-addon3"
          @onmouseenter="@(()=>OnEmojiHover(iconType:"save"))"
          @onmouseleave="OnEmojiMouseLeft">💾</span>
</div>
<div class="card mt-3">
    <div class="card-header">
        💾 Saved Passwords
    </div>
    <div class="card-body">
        <ul class="list-group">
            @foreach (var item in savePasswords)
            {
                <li class="list-group-item">@item</li>

            }

        </ul>
    </div>
</div>
@code{
    private bool includeLowerCase = true;
    private bool includeUpperCase = true;
    private bool includeNumbers = true;
    private bool includeSpecialChars = true;

    private const string lowerCaseLetters = "abcdefghijklmnopqrstuvwxyz";
    private const string upperCaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private const string numbers = "0123456789";
    private const string specialCharacters = "!@#$%^&*()_+-=[]{}|;:,.<>?";

    private string onHoverCopyCss = string.Empty;
    private string onHoverGenerateCss = string.Empty;
    private string onHoverSaveCss = string.Empty;
    private string password = string.Empty;
    private int passwordLenght = 10;

    private static Random random = new Random();
    private static System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
    private List<string> savePasswords = [];

    private void SaveHandlePasswordClick()
    {
        if (string.IsNullOrEmpty(password) || savePasswords.Any(x => x == password)) return;
        savePasswords.Insert(0, password);
    }
    private void HandleGeneratePasswordClick()
    {
        stringBuilder.Clear();
        var validChars = new System.Text.StringBuilder();

        // allLowercaseLetters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

        if (includeLowerCase)
            validChars.Append(lowerCaseLetters);

        if (includeUpperCase)
            validChars.Append(upperCaseLetters);

        if (includeNumbers)
            validChars.Append(numbers);

        if (includeSpecialChars)
            validChars.Append(specialCharacters);


        for (int i = 0; i < passwordLenght; i++)
        {
            var randomIndex = random.Next(0, validChars.Length);
        stringBuilder.Append(validChars[randomIndex]);
        }
        password = stringBuilder.ToString();
    }
    private void OnEmojiHover(string iconType)
    {
        switch (iconType)
        {
            case "copy":
                onHoverCopyCss = "bg-secondary";
                break;
            case "save":
                onHoverSaveCss = "bg-secondary";
                break;
            case "generate":
                onHoverGenerateCss = "bg-secondary";
                break;
            default:
                break;
        }
    }
    private void OnEmojiMouseLeft()
    {
        onHoverCopyCss = string.Empty;
        onHoverGenerateCss = string.Empty;
        onHoverSaveCss = string.Empty;
    }
}
@*<p class="mb-1">@password</p><input type="text" class="form-control" @bind="password" @bind:evet="oninput" />
    <input  type="range" min="6" max="30" step="1" class="form-control" @bind="password" @bind:evet="oninput"/>

    @code{
        private string password = "Umut Atraş";
        private int passwordLength = 6;
    }*@