@inject NavigationManager Navigation
@page "/"

<PageTitle>Home</PageTitle>
<div class="card">
    <div class="card-body">


        <div class="input-group mb-3">
            <input @bind="password" readonly="readonly" type="text" class="form-control">
            <span @onmouseenter="@(() => OnEmojiHover("copy"))" @onmouseleave="@OnEmojiMouseLeft" class="input-group-text my-clickable-button @onHoverCopyCss" id="basic-addon2">📄</span>
            <span @onclick="HandleGeneratePasswordClick" @onmouseenter="@(() => OnEmojiHover("generate"))" @onmouseleave="@OnEmojiMouseLeft" class="input-group-text my-clickable-button @onHoverGenerateCss" id="basic-addon3">🔄</span>
            <span @onclick="SaveHandlePasswordClick" @onmouseenter="@(() => OnEmojiHover("save"))" @onmouseleave="@OnEmojiMouseLeft" class="input-group-text my-clickable-button @onHoverSaveCss" id="basic-addon4">💾</span>
        </div>

        <div class="mb-3">
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" @bind="@includeNumbers" id="inlineCheckbox1" @oninput="((args)=>HandleCheckBoxOnChange(args,Enums.CheckBoxActionType.Numbers))">
                <label class="form-check-label" for="inlineCheckbox1">Numbers</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" @bind="@includeLowerCase" id="inlineCheckbox2" @oninput="((args)=>HandleCheckBoxOnChange(args,Enums.CheckBoxActionType.Lowercase))">
                <label class="form-check-label" for="inlineCheckbox2">Lowercase</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" @bind="@includeUpperCase" id="inlineCheckbox3" @oninput="((args)=>HandleCheckBoxOnChange(args,Enums.CheckBoxActionType.Uppercase))">
                <label class="form-check-label" for="inlineCheckbox3">Uppercase</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" @bind="@includeSpecialChars" id="inlineCheckbox4" @oninput="((args)=>HandleCheckBoxOnChange(args,Enums.CheckBoxActionType.SpecialChars))">
                <label class="form-check-label" for="inlineCheckbox4">Special Chars</label>
            </div>
        </div>
        <div>
            <p class="mb-1 mt-3">Password Length: <b>@passwordLenght</b></p>

            <input type="range" class="form-range" step="1" min="8" max="50" @bind="passwordLenght" @oninput="HandleRangeOnChange" />
        </div>
    </div>

</div>
<div class="card mt-3">
    <div class="card-header">
        <MaterialSaveIcon AdditionalCss="cursor:pointer;"
                          Width="2"
                          Height="2"
                          ColorCode="#FFDE4D"
                          OnClick="@HandleSaveIconClick" /> Saved Passwords
    </div>
    <div class="card-body">
        <ul class="list-group">
            @foreach (var item in savePasswords)
            {
                <li class="list-group-item">@item</li>

            }

        </ul>
    </div>
</div>

@code{
    private bool includeLowerCase = true;
    private bool includeUpperCase = true;
    private bool includeNumbers = true;
    private bool includeSpecialChars = true;

    private const string lowerCaseLetters = "abcdefghijklmnopqrstuvwxyz";
    private const string upperCaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private const string numbers = "0123456789";
    private const string specialCharacters = "!@#$%^&*()_+-=[]{}|;:,.<>?";

    private string onHoverCopyCss = string.Empty;
    private string onHoverGenerateCss = string.Empty;
    private string onHoverSaveCss = string.Empty;
    private string password = string.Empty;
    private int passwordLenght = 10;

    private static Random random = new Random();
    private static System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
    private List<string> savePasswords = [];
    private void HandleSaveIconClick()
    {
        Navigation.NavigateTo("/counter");
    }
    private void HandlePasswordLengthInputOnChange(ChangeEventArgs args)
    {
        if (args.Value is null) return;

        passwordLenght = Convert.ToInt32(args.Value);
        GeneratePassword();
    }
    private void HandleRangeOnChange(ChangeEventArgs args)
    {
        if (args.Value is null) return;

        passwordLenght = Convert.ToInt32(args.Value);
        GeneratePassword();
    }
    private void SaveHandlePasswordClick()
    {
        if (string.IsNullOrEmpty(password) || savePasswords.Any(x => x == password)) return;
        savePasswords.Insert(0, password);
    }

    private void GeneratePassword()
    {
        stringBuilder.Clear();
        var validChars = new System.Text.StringBuilder();

        // allLowercaseLetters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

        if (includeLowerCase)
            validChars.Append(lowerCaseLetters);

        if (includeUpperCase)
            validChars.Append(upperCaseLetters);

        if (includeNumbers)
            validChars.Append(numbers);

        if (includeSpecialChars)
            validChars.Append(specialCharacters);


        for (int i = 0; i < passwordLenght; i++)
        {
            var randomIndex = random.Next(0, validChars.Length);
            stringBuilder.Append(validChars[randomIndex]);
        }
        password = stringBuilder.ToString();

    }
    protected override void OnInitialized()
    {
        GeneratePassword();
        base.OnInitialized();
    }

    private void HandleCheckBoxOnChange(ChangeEventArgs args, UA.BlazorWasmStarter.Enums.CheckBoxActionType actionType)
    {
        if (args.Value is null)
        {
            return;
        }
        switch (actionType)
        {
            case Enums.CheckBoxActionType.Numbers:
                includeNumbers = (bool)args.Value;
                break;
            case Enums.CheckBoxActionType.Lowercase:
                includeLowerCase = (bool)args.Value;
                break;
            case Enums.CheckBoxActionType.Uppercase:
                includeUpperCase = (bool)args.Value;
                break;
            case Enums.CheckBoxActionType.SpecialChars:
                includeSpecialChars = (bool)args.Value;
                break;
            default:
                throw new ArgumentException("Geçersiz Değer", nameof(actionType));

        }
        GeneratePassword();
    }

    private void HandleGeneratePasswordClick()
    {
        GeneratePassword();
    }

    private void OnEmojiHover(string iconType)
    {
        switch (iconType)
        {
            case "copy":
                onHoverCopyCss = "bg-secondary";
                break;
            case "save":
                onHoverSaveCss = "bg-secondary";
                break;
            case "generate":
                onHoverGenerateCss = "bg-secondary";
                break;
            default:
                break;
        }
    }
    private void OnEmojiMouseLeft()
    {
        onHoverCopyCss = string.Empty;
        onHoverGenerateCss = string.Empty;
        onHoverSaveCss = string.Empty;
    }
}
@*<p class="mb-1">@password</p><input type="text" class="form-control" @bind="password" @bind:evet="oninput" />
    <input  type="range" min="6" max="30" step="1" class="form-control" @bind="password" @bind:evet="oninput"/>

    @code{
        private string password = "Umut Atraş";
        private int passwordLength = 6;
    }*@